// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: accesstokens.sql

package repo

import (
	"context"
	"database/sql"
	"time"
)

const countValidAccessTokens = `-- name: CountValidAccessTokens :one
SELECT
    id, expiration_time, token, user_id
FROM
    AccessTokens
WHERE
    user_id=$1
AND
    expiration_time > now() at time zone 'utc'
`

func (q *Queries) CountValidAccessTokens(ctx context.Context, userID sql.NullInt32) (Accesstoken, error) {
	row := q.db.QueryRowContext(ctx, countValidAccessTokens, userID)
	var i Accesstoken
	err := row.Scan(
		&i.ID,
		&i.ExpirationTime,
		&i.Token,
		&i.UserID,
	)
	return i, err
}

const createAccessToken = `-- name: CreateAccessToken :one
INSERT INTO
    AccessTokens
    (token, user_id, expiration_time)
VALUES
    ($1,$2,$3)
RETURNING id, expiration_time, token, user_id
`

type CreateAccessTokenParams struct {
	Token          string
	UserID         sql.NullInt32
	ExpirationTime time.Time
}

func (q *Queries) CreateAccessToken(ctx context.Context, arg CreateAccessTokenParams) (Accesstoken, error) {
	row := q.db.QueryRowContext(ctx, createAccessToken, arg.Token, arg.UserID, arg.ExpirationTime)
	var i Accesstoken
	err := row.Scan(
		&i.ID,
		&i.ExpirationTime,
		&i.Token,
		&i.UserID,
	)
	return i, err
}

const deleteAccessToken = `-- name: DeleteAccessToken :exec
DELETE FROM
    AccessTokens
WHERE
    id=$1
`

func (q *Queries) DeleteAccessToken(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccessToken, id)
	return err
}

const getAccessTokenByUserID = `-- name: GetAccessTokenByUserID :one
SELECT
    id, expiration_time, token, user_id
FROM
    AccessTokens
WHERE
    user_id=$1
`

func (q *Queries) GetAccessTokenByUserID(ctx context.Context, userID sql.NullInt32) (Accesstoken, error) {
	row := q.db.QueryRowContext(ctx, getAccessTokenByUserID, userID)
	var i Accesstoken
	err := row.Scan(
		&i.ID,
		&i.ExpirationTime,
		&i.Token,
		&i.UserID,
	)
	return i, err
}

const getAccessTokenByValue = `-- name: GetAccessTokenByValue :one
SELECT
    id, expiration_time, token, user_id
FROM
    AccessTokens
WHERE
    token=$1
`

func (q *Queries) GetAccessTokenByValue(ctx context.Context, token string) (Accesstoken, error) {
	row := q.db.QueryRowContext(ctx, getAccessTokenByValue, token)
	var i Accesstoken
	err := row.Scan(
		&i.ID,
		&i.ExpirationTime,
		&i.Token,
		&i.UserID,
	)
	return i, err
}

const updateAccessToken = `-- name: UpdateAccessToken :exec
UPDATE
    AccessTokens
SET
    token=$1
WHERE
    user_id=$2
`

type UpdateAccessTokenParams struct {
	Token  string
	UserID sql.NullInt32
}

func (q *Queries) UpdateAccessToken(ctx context.Context, arg UpdateAccessTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateAccessToken, arg.Token, arg.UserID)
	return err
}

const updateAccessTokenExpirationTime = `-- name: UpdateAccessTokenExpirationTime :exec
UPDATE
    AccessTokens
SET
    expiration_time=$1
WHERE
    user_id=$2
`

type UpdateAccessTokenExpirationTimeParams struct {
	ExpirationTime time.Time
	UserID         sql.NullInt32
}

func (q *Queries) UpdateAccessTokenExpirationTime(ctx context.Context, arg UpdateAccessTokenExpirationTimeParams) error {
	_, err := q.db.ExecContext(ctx, updateAccessTokenExpirationTime, arg.ExpirationTime, arg.UserID)
	return err
}
